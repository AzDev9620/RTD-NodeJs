https://github.com/papyrussolution/UhttBarcodeReference




     io[worker_id].on('connection', function (socket) {
         console.log("555555555555555555555555555555555555555");
         console.log('connection: ', socket.id, Date());
         socket.join(socket.handshake.sessionID);
         var sockets = io[worker_id].sockets.sockets;
         keys = Object.keys(sockets);
         console.log('keys...', keys);

         keys.forEach(function (sock) {
             console.log('sockets[sock].id ...', sockets[sock].id)
             console.log('sockets[sock].handshake.sessionID ...', sockets[sock].handshake.sessionID)
             //console.log('sockets[sock].handshake.session.userid ...', sockets[sock].handshake.session.userid)
             console.log('sockets[sock].handshake.session.userdata ...', sockets[sock].handshake.session.userdata)

             if (sockets[sock].id != socket.id) {
                 console.log("sockets[sock].id", sockets[sock].id)
                 //sockets[sock].emit('ish', {ish: 1});
             }
         });
         //console.log(socket);



         socket.on("login", function (data, callback) {
             console.log("userdata... ", data);
             var login = data.login.trim();
             var pass = data.pass.trim();
             if (0 < login.length && 0 < pass.length) {
                 var sql = "select * from users where login ='" + login + "' and pass = '" + pass + "'; ";
                 model_pg.query(sql, (e, r)=> {
                     //console.log("login..onlogin e.", e);
                     //console.log("login..onlogin r.", r);
                     console.log("login..onlogin r.", r.rows);

                     var rowCount = r.rowCount;

                     if (0 < rowCount) {
                         var row = r.rows[0];
                         //socket.handshake.session.userid = row.id;
                         //socket.handshake.session.login = row.login;
                         socket.handshake.session.userdata = row;


                         if (sockets[socket.id] != undefined
                             && sockets[socket.id].handshake.session.userdata != undefined) {
                             var loginsuccess = {};
                             loginsuccess.bool = true;
                             loginsuccess.user = row;
                             socket.handshake.session.save();
                             //callback(loginsuccess);
                             //socket.join(socket.handshake.sessionID);
                             io[worker_id].to(socket.handshake.sessionID).emit('reslogin', true);
                             keys.forEach(function (sock) {
                                 //console.log('sockets[sock].id ...', sockets[sock].id)
                                 //console.log('sockets[sock].handshake.sessionID ...', sockets[sock].handshake.sessionID)
                                 //console.log('sockets[sock].handshake.session.userid ...', sockets[sock].handshake.session.userid)
                                 //console.log('sockets[sock].handshake.session.userdata ...', sockets[sock].handshake.session.userdata)

                                 if (sockets[sock].handshake.sessionID != sockets[socket.id].handshake.session.sessionID) {
                                     console.log(sockets[sock].id)
                                     //sockets[sock].emit('reslogin', loginsuccess);
                                 }
                             });


                         }
                         console.log('socket.handshake.session.userdata....', socket.handshake.session.userdata);
                         //console.log('sockets[socket.id]....', sockets[socket.id]);
                         console.log('sockets[socket.id].handshake.session.userdata....', sockets[socket.id].handshake.session.userdata);
                     } else {
                         var loginsuccess = {};
                         loginsuccess.bool = false;
                         if (sockets[socket.id] != undefined) {
                             callback(loginsuccess);
                             //sockets[socket.id].emit('loginsuccess', loginsuccess);

                         }
                     }
                 });
             }
             //console.log(socket);
             //console.log(socket.handshake);
             //console.log('socket.handshake.session ...' , socket.handshake.session);
             //console.log(socket.handshake.session.userdata);

         });


         socket.on("reqlogout", function (userdata) {
             //console.log(sockets[socket.id].id)
             // console.log(sockets[socket.id].handshake.sessionID)
             // console.log(sockets[socket.id].handshake.session.userid)
             console.log('socket.handshake.session.userdata ...', socket.handshake.session.userdata)
             io[worker_id].to(socket.handshake.sessionID).emit('reslogout', true);
             delete socket.handshake.session.userdata;
             socket.handshake.session.save();
         });

         socket.on("sessioncheckreq", function (data) {
             console.log("sessioncheckreq", data)
             socket.emit('sessioncheckres', socket.handshake.session.userdata);
         });


         socket.on('logincheck', function (data) {
             console.log('logincheck... ' + data);
             var sockets = io[worker_id].sockets.sockets;
             var keys = Object.keys(sockets);
             //console.log(keys)
             console.log("userdata... ", data);
             var login = data.trim();
             if (0 < login.length) {
                 var sql = "select * from users where login ='" + login + "'  ; ";
                 model_pg.query(sql, (e, r)=> {
                     console.log("login..onlogin e.", e);
                     console.log("login..onlogin r.", r);
                     console.log("login..onlogin r.", r.rows);
                     var rowCount = r.rowCount;
                     if (0 < rowCount) {
                         var row = r.rows[0];
                         io[worker_id].to(socket.handshake.sessionID).emit('lchkres', false);
                     } else {
                         io[worker_id].to(socket.handshake.sessionID).emit('lchkres', true);
                     }
                 });
             }
         });

         //------------- S T O C K ----------------------------------


         socket.on('reqfolder', function (data, callback) {
             console.log(data);
             console.log('reqfolder: ' + socket.id + " at: ", +new Date());
             //var beg = +new Date();
             var sockets = io[worker_id].sockets.sockets;

             //console.log(sockets)
             //console.log('uid...', sockets[socket.id].handshake.session.userid);
             sendfolder(data, sockets[socket.id], callback);
             //if (sockets[socket.id].handshake.session.userid != undefined) {
             //    //var curudata = sockets[socket.id].handshake.session.userdata;
             //    //console.log("curudata", curudata)
             //
             //}
             /*else {
              callback(false);
              }*/
         });

         socket.on('reqbarcodefolder', function (data, callback) {
             console.log(data);
             console.log('reqbarcodefolder: ' + socket.id + " at: ", +new Date());
             //var beg = +new Date();
             var sockets = io[worker_id].sockets.sockets;

             //console.log(sockets)
             //console.log('uid...', sockets[socket.id].handshake.session.userid);
             sendbarcodefolder(data, sockets[socket.id], callback);
             //if (sockets[socket.id].handshake.session.userid != undefined) {
             //    //var curudata = sockets[socket.id].handshake.session.userdata;
             //    //console.log("curudata", curudata)
             //
             //}
             /*else {
              callback(false);
              }*/
         });

         socket.on('reqbarcodecat', function (data, callback) {
             console.log(data);
             console.log('reqbarcodecat: ' + socket.id + " at: ", +new Date());
             //var beg = +new Date();
             var sockets = io[worker_id].sockets.sockets;

             //console.log(sockets)
             //console.log('uid...', sockets[socket.id].handshake.session.userid);
             sendbarcodecat(data, sockets[socket.id], callback);
             //if (sockets[socket.id].handshake.session.userid != undefined) {
             //    //var curudata = sockets[socket.id].handshake.session.userdata;
             //    //console.log("curudata", curudata)
             //
             //}
             /*else {
              callback(false);
              }*/
         });

         //-------------END OF STOCK-------------------------

         socket.on('reboot', function (data) {
             console.log(data);
             // Destroy all open sockets
             /*for (var socketId in serversockets) {
              console.log('socket', socketId, 'destroyed');
              serversockets[socketId].destroy();
              }*/
             //require('reboot').reboot();
         });

         socket.on('ServerClose', function (data) {
             console.log(data);
             execute('killall ffmpeg', function (callback) {
                 console.log(callback);
             });
             connectionHandler = function () {
             }
             nsp.removeListener('connection', connectionHandler);

             // Close the server
             server.close(function () {
                 console.log('Server closed!');
             });
             process.exit();
         });

         socket.on('disconnect', function () {
             console.log('disconnect: ' + socket.id + " at: " + Date());
             //mainLog('mainlog', 'disconnect: ' + socket.id + " at: " + Date());
         });


     });


larkinterm@gmail.com


    socket.on("login", function (data, callback) {
        console.log("userdata... ", data);
        var login = data.login.trim();
        var pass = data.pass.trim();
        if (0 < login.length && 0 < pass.length) {
            var sql = "select * from users where login ='" + login + "' and pass = '" + pass + "'; ";
            model_pg_clients.query(sql, (e, r)=> {
                //console.log("login..onlogin e.", e);
                //console.log("login..onlogin r.", r);
                //console.log("login..onlogin r.", r.rows);

                var rowCount = r.rowCount;

                if (0 < rowCount) {
                    var row = r.rows[0];
                    socket.handshake.session.userid = row.id;
                    socket.handshake.session.login = row.login;
                    socket.handshake.session.userdata = row;

                    var loginsuccess = {bool: true, user: row};
                    if (sockets[socket.id] != undefined
                        && sockets[socket.id].handshake.session.userid) {

                        callback(loginsuccess);
                        socket.handshake.session.save();
                        //socket.join(socket.handshake.sessionID);
                        //io.to(socket.handshake.sessionID).emit('reslogin', true);
                        /*keys.forEach(function (sock) {
                         //console.log('sockets[sock].id ...', sockets[sock].id)
                         //console.log('sockets[sock].handshake.sessionID ...', sockets[sock].handshake.sessionID)
                         //console.log('sockets[sock].handshake.session.userid ...', sockets[sock].handshake.session.userid)
                         //console.log('sockets[sock].handshake.session.userdata ...', sockets[sock].handshake.session.userdata)

                         if (sockets[sock].handshake.sessionID != sockets[socket.id].handshake.session.sessionID) {
                         console.log(sockets[sock].id)
                         //sockets[sock].emit('reslogin', loginsuccess);
                         }
                         });*/


                    }
                    console.log('socket.handshake.session.userdata....', socket.handshake.session.userdata);
                    //console.log('sockets[socket.id]....', sockets[socket.id]);
                    //console.log('sockets[socket.id].handshake.session.userdata....', sockets[socket.id].handshake.session.userdata);
                } else {
                    var loginsuccess = {};
                    loginsuccess.bool = false;
                    if (sockets[socket.id] != undefined) {
                        callback(loginsuccess);
                        //sockets[socket.id].emit('loginsuccess', loginsuccess);

                    }
                }
            });
        }
        //console.log(socket);
        //console.log(socket.handshake);
        //console.log('socket.handshake.session ...' , socket.handshake.session);
        //console.log(socket.handshake.session.userdata);

    });


